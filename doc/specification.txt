
Taking the interval [A,B] where a,b are integers 0 <= A <= B 
we want to cover this interval with non overlapping
intervals
	[a_i, b_i]
such that
	a_(i+1) = b_i + 1	# ie joined end to end

and for some c_i >= 0
	a_i mod 2^c_i = 0    and   b_i = a_i + (2^c_i - 1)

We have a sequence of c_i (1<=i<=k) which define the powers of 2 that
in turn define the intervals [a_i, b_i]

b_1	= A + 2^c_1 - 1			#  A mod 2^c_1 = 0

a_i	= A + Sum(1<=j<=i) 2^c_j	#  a_j mod 2^c_j = 0

B	= a_(k-1) + 2^c_k - 1
	= A + Sum(1<=j<=k-1) 2^c_j  + (2^c_k - 1)

Without optimisation we could assign c_i = 0 but we wish to minimise the
number of intervals (k) subject to the constraints.

Looking at a_i if we define 
	z (x,y) = n where max(n): (x mod 2^n = 0) and x + (2^n - 1) <= y

and select c_i	= z( a_i, B)
we can see that this is maximal since if we selected
	c_i' < z(a_i, B) 
ie	c_i' = c_i + m 		(m>0)

	a_(i+1)' = a_i + 2^c_i' 
but
	z(a_(i+1)', B) = c_i'

	a_(i+2)' = a_(i+1)' + 2^c_i'
		 = a_i + 2^c_i' + 2^c_i'
		 = a_i + 2^(c_i'+1)

and so on until a_(i+m+1)' = a_(i+1) 

So we are only adding m extra steps.
